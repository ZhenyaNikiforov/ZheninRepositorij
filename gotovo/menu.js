(()=>{var e={776:(e,n,t)=>{e.exports=t.p+"imag/gl.png"},351:(e,n,t)=>{e.exports=t.p+"imag/head.png"},888:(e,n,t)=>{e.exports=t.p+"imag/ikonka3.png"},673:(e,n,t)=>{e.exports=t.p+"imag/ikonkafejsbuka.png"},114:(e,n,t)=>{e.exports=t.p+"imag/ikonkainternet.png"},399:(e,n,t)=>{e.exports=t.p+"imag/ikonkatwittera.png"},955:(e,n,t)=>{e.exports=t.p+"imag/menu.png"},582:(e,n,t)=>{e.exports=t.p+"imag/play.png"},23:(e,n,t)=>{e.exports=t.p+"imag/red.png"},424:(e,n,t)=>{e.exports=t.p+"imag/sec.png"},822:(e,n,t)=>{e.exports=t.p+"imag/sec2.png"},62:(e,n,t)=>{e.exports=t.p+"imag/sec3.png"},3:(e,n,t)=>{e.exports=t.p+"imag/sec4.png"},550:(e,n,t)=>{e.exports=t.p+"imag/sky.png"},125:(e,n,t)=>{e.exports=t.p+"imag/vector.png"},91:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),n.hash&&(e+=n.hash),n.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var p=n[r]={exports:{}};return e[r](p,p.exports,t),p.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{"use strict";var e=t(91),n=t.n(e),r=new URL(t(351),t.b),o=new URL(t(955),t.b),p=new URL(t(23),t.b),a=new URL(t(424),t.b),i=new URL(t(3),t.b),s=new URL(t(62),t.b),g=new URL(t(822),t.b),c=new URL(t(550),t.b),u=new URL(t(776),t.b),m=new URL(t(582),t.b),b=new URL(t(125),t.b);n()(r),n()(o),n()(p),n()(a),n()(i),n()(s),n()(g),n()(c),n()(u),n()(m),n()(b);var l=new URL(t(351),t.b),w=new URL(t(955),t.b),d=new URL(t(125),t.b);n()(l),n()(w),n()(d);var L=new URL(t(351),t.b),R=new URL(t(955),t.b),U=new URL(t(550),t.b),x=new URL(t(125),t.b);n()(L),n()(R),n()(U),n()(x);var f=new URL(t(351),t.b),k=new URL(t(955),t.b),v=new URL(t(776),t.b),h=new URL(t(582),t.b),y=new URL(t(125),t.b);let _,E,j,B;n()(f),n()(k),n()(v),n()(h),n()(y),t(776),t(351),t(888),t(673),t(114),t(399),t(955),t(582),t(23),t(424),t(822),t(62),t(3),t(550),t(125),_=document.getElementById("knopka_menu"),E=document.getElementById("menu"),j=document.getElementById("ikonka"),B=document.getElementById("krestik"),_.addEventListener("click",(function(){j.classList.toggle("ne_vidna_iconka_menu"),B.classList.toggle("ne_viden_container_zakryit_menu"),E.classList.toggle("ne_vidno_menu")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,